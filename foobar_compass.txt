          IDENT  FOOBAR1,TME
          ABS 
          ENTRY  START
******************************************************************
*         FOOBAR - Print numbers or foo or bar or both.          *
*                                                                *
*         If I is divisible by 3, print foo                      *
*         If I is divisible by 5, print bar                      *
*         If I is divisible by 3 and 5, print foobar             *
******************************************************************
          SYSCOM B1          Tell compiler we set B1 to 1
          ORG    110B
TME       CON    0
*
*         11     18          30
*
START     SB1    1           b1 <- 1   Always start with B1=1
          SX6    B1          x6 <- b1  Loop start
          SA6    I           a6 <- addr(I) x6 -> I  Store in memory
          BX3    X6          x3 <- x6  X3 is I in our loop
LOOP      SA4    THREE       a3 <- addr(THREE), X4 <- 3
          RJ     MOD         Return jump MOD(I,3):  X6 <- MOD(X3,X4)
          BX0    X6          x0 <- x6  Copy of MOD(I,3) result
          SA4    FIVE        a4 <- addr(FIVE), X4 <- 5
          RJ     MOD         Return jump MOD(I,5):  X6 <- MOD(X3,X4)
          BX5    X0+X6       x5 <- x0|x6  X5 is MOD(I,3)>0 .or. MOD(I,5)>0
          ZR     X5,MOD3A5   If X5 .eq. 0 goto MOD3A5  If .not. (MOD(I,3)>0 .or. MOD(I,5)>0)
          ZR     X0,MOD3     If X0 .eq. 0 goto MOD3    If .not. MOD(I,3)>0
          ZR     X6,MOD5     If X6 .eq. 0 goto MOD5    If .not. MOD(I,5)>0
          EQ     PRINTI      Goto PRINTI
MOD3      WRITEH OUTPUT,FOO,FOOLEN       Move to buffer
          EQ     FLUSH       Goto FLUSH
MOD5      WRITEH OUTPUT,BAR,BARLEN       Move to buffer
          EQ     FLUSH       Goto FLUSH
MOD3A5    WRITEH OUTPUT,FOOBAR,FBLEN     Move to buffer
          EQ     FLUSH       Goto FLUSH
PRINTI    BX1    X3          x1 <- x3  Copy I to X1 for CDD routine
          RJ     =XCDD       Return Jump to CDD
          SA6    NUM         a6 <- addr(NUM), x6 -> NUM  Save to memory for write
          WRITEH OUTPUT,NUM,1
*
FLUSH     WRITER OUTPUT,R    Flush buffer
          SA3    I           a3 <- addr(I)  x3 <- I
          SX3    X3+B1       x3 <- x3+b1   Increment I by 1
          SA4    MAX         a4 <- addr(MAX), X4 <- 100
          IX4    X4-X3       x4 <- x4-x3
          BX6    X3          x6 <- x3  Copy to register for saving to memory
          NG     X4,LOOPEND  Exit loop if X4 (I) .gt. MAX  
          SA6    I           a6 <- addr(I),  x6 -> I  Save I to memory
          EQ     LOOP        Goto LOOP   Loop again
LOOPEND   WRITEH OUTPUT,DONE,1
          WRITER OUTPUT,R
          ENDRUN
*         CONSTANTS
MAX       DATA   20 
THREE     DATA   3
FIVE      DATA   5
FOO       DATA   3HFOO
FOOLEN    EQU    *-FOO
BAR       DATA   3HBAR
BARLEN    EQU    *-BAR
FOOBAR    DATA   6HFOOBAR
FBLEN     EQU    *-FOOBAR
DONE      DATA   4HDONE
I         BSS    1
NUM       BSS    1
OBUF      BSS    301B
OUTPUT    FILEB  OBUF,301B
******************************************************************
*         Subroutine MOD - Calculate modulus (remainder)         *
*                                                                *
*         Input:  X3,X4                                          *
*         Output: X6: MOD(X3,X4)                                 *
*         Uses:   X6,X7,B7                                       *
*                                                                *
*         INT(N/D) -> X                                          *
*         X*D -> Temp                                            *
*         N-Temp -> R                                            *
******************************************************************
MOD       BSS    1           Storage for our return instruction and address
          BX6    X3          X6 <- X3  Copy X3 into X6
          BX7    X4          X7 <- X4  Copy X4 into X7
*                            X6=X6/X7 (integer division)
          PX6                Convert to float (pack)
          NX6                Normalize
          PX7                Convert to float (pack)
          NX7                Normalize
          FX6    X6/X7       Floating point X6 <- X6/X7
          UX6    B7          Unpack X6 B7 bits  Convert float to interger, exponent in B7
          LX6    B7          Logical shift mantissa B7 bits (rest of integer conversion)
          IX6    X6*X4       X6 <- X6*X4  TEMP=X*D
          IX6    X3-X6       X6 <- X3-X6  R=N-TEMP
          EQ     MOD         Goto MOD     Return to caller
******************************************************************
*         Common decks required for our program
OPL       XTEXT  COMCSYS
OPL       XTEXT  COMCWTH
OPL       XTEXT  COMCWTO
OPL       XTEXT  COMCCIO
OPL       XTEXT  COMCWTW
OPL       XTEXT  COMCCDD
          END    START
